#!/bin/bash

# Usage
helpmsg() {
    echo -e "Run HiTMaP.\n"
    echo -e "Usage: hitmap --input INPUT_FILE --fasta FASTA_FILE --rotation ROTATION_FILE --outdir OUTPUT_DIRECTORY\n"
}

# Get arguments
POSITIONAL=()
RARGS=()
DATADIR=""
CANDIDATELIST=""
while [[ $# -gt 0 ]]
do
    KEY="$1"
    case $KEY in
        -h|--help)
            helpmsg
            exit 0
            ;;
        -d|--datadir)
            DATADIR="$2"
            shift
            shift
            ;;
        -l|--candidatelist)
            CANDIDATELIST="$2"
            shift
            shift
            ;;
        -s|--stage)
            RARGS+=("--stage $2")
            shift
            shift
            ;;
        -c|--config)
            RARGS+=("--config $2")
            shift
            shift
            ;;
        -t|--threads)
            RARGS+=("--threads $2")
            shift
            shift
            ;;
        *)
            POSITIONAL+=("$1")
            shift
            ;;
    esac
done

set -- "${POSITIONAL[@]}"

if [ -z "${RARGS}" ]
then
    echo "ERROR: Missing arguments."
    exit 1
fi

set -euo pipefail


if [ -z "${DATADIR}" ] || [ ! -d "${DATADIR}" ]
then
    echo "ERROR: Data directory '${DATADIR}' does not exist."
    exit 1
fi

SUMMARYDIR="${DATADIR%/}/Summary folder"
if [ -n "${CANDIDATELIST}" ] && [ -f "${CANDIDATELIST}" ]
then
    PROTEININDEX=$(dirname "${CANDIDATELIST}")/protein_index.csv
fi
if [ -d "${SUMMARYDIR}" ] && [ -f "${SUMMARYDIR}/candidatelist.csv" ] && [ -f "${SUMMARYDIR}/protein_index.csv" ]
then
    echo "Using candidate list already present in '${SUMMARYDIR}'..."
elif [ -n "${CANDIDATELIST}" ] && [ -f "${CANDIDATELIST}" ] && [ -f "${PROTEININDEX}" ]
then
    echo "Using specified previous candidate list '${CANDIDATELIST}'..."
    if [ -d "${SUMMARYDIR}" ]
    then
        echo "Incomplete summary directory found. Removing and replacing with specified candidate list."
        rm -rf "${SUMMARYDIR}"
    fi

    mkdir -p "${SUMMARYDIR}"
    cp ${CANDIDATELIST} "${PROTEININDEX}" "${SUMMARYDIR}/"
fi

Rscript --vanilla run.R ${RARGS[@]}